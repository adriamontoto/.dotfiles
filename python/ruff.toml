fix = true
indent-width = 4
line-length = 120
target-version = 'py311'

[format]
docstring-code-format = true
docstring-code-line-length = 120
indent-style = 'space'
quote-style = 'single'
skip-magic-trailing-comma = false

[lint]
select = [
    'F',  # pyflakes
    'E',  # pycodestyle
    'W',  # pycodestyle
    'D',  # pydocstyle
    'C90',  # mccabe
    'I',  # isort
    'N',  # pep8-naming
    'UP',  # pyupgrade
    'B',  # flake8-bugbear
    'C4',  # flake8-comprehensions
    'DTZ',  # flake8-datetimez
    'S',  # flake8-bandit
    'SIM',  # flake8-simplify
    'RUF',  # ruff
]
ignore = [
    'E111',  # Checks for indentation with a non-multiple of 4 spaces.
    'E114',  # Checks for indentation of comments with a non-multiple of 4 spaces.
    'E117',  # Checks for over-indented code.
    'W191',  # Checks for indentation that uses tabs.
    'D200',  # Checks for single-line docstrings that are broken across multiple lines.
    'D205',  # 1 blank line required between summary line and description.
    'D206',  # Checks for docstrings that are indented with tabs.
    'D212',  # Checks for docstring summary lines that are not positioned on the first physical line of the docstring.
    'D401',  # First line of docstring should be in imperative mood.
    'D300',  # Checks for docstrings that use '''triple single quotes''' instead of 'triple double quotes'.
]

[lint.per-file-ignores]
'__init__.py' = [
    'F401',  # Checks for unused imports.
    'D104',  # Checks for undocumented public package definitions.
]
'database.py' = [
    'F401',  # Checks for unused imports.
]
'**test**.py' = [
    'S101',  # Use of `assert` detected.
]

[lint.mccabe]
max-complexity = 10

[lint.pydocstyle]
convention = 'pep257'
property-decorators = ['sqlalchemy.ext.hybrid.hybrid_property']

[lint.pep8-naming]
classmethod-decorators = [
    'pydantic.field_validator',  # Allow Pydantic's @field_validator decorator to trigger class method treatment.
    'pydantic.model_validator',  # Allow Pydantic's @model_validator decorator to trigger class method treatment.
    'declared_attr',  # Allow SQLAlchemy's dynamic decorators, like @field.expression, to trigger class method treatment.
    'expression',  # Allow SQLAlchemy's dynamic decorators, like @field.expression, to trigger class method treatment.
    'comparator',  # Allow SQLAlchemy's dynamic decorators, like @field.expression, to trigger class methodÂ treatment.
]

[lint.flake8-bugbear]
extend-immutable-calls = [
    'fastapi.Body',
    'fastapi.Cookie',
    'fastapi.Depends',
    'fastapi.File',
    'fastapi.Form',
    'fastapi.Header',
    'fastapi.Path',
    'fastapi.Query',
]

[lint.isort]
case-sensitive = true
extra-standard-library = ['typing_extensions']
known-first-party = ['src', 'backend', 'app']
combine-as-imports = true
